{"name":"Android volley sample","tagline":"sample project of android volley library","body":"In this post i will describe how to use android volley library for your json request.First you have to download android volley library.I have uploaded this sample projcet to github so you can download volley.jar file from here(https://github.com/sajith4u/Android_volley_Sample/tree/master/Android_Volley/libs).Or you can download from here(https://drive.google.com/?tab=jo&authuser=0#folders/0B6boUJ62bUIXZUJQbUdoS08tMms).First You have to add AppController class to your package.Befor that make sure you have put volley.jar file in to your lib folder.\r\n\r\npackage com.example.Android_Volley;\r\nimport android.app.Application;\r\nimport android.text.TextUtils;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.toolbox.Volley;\r\n/**\r\n\r\n * Created with IntelliJ IDEA.\r\n\r\n * User: Sajith\r\n\r\n * Date: 9/8/14\r\n\r\n * Time: 9:04 PM\r\n\r\n * To change this template use File | Settings | File Templates.\r\n\r\n */\r\n\r\npublic class AppController extends Application {\r\n    public static final String TAG = AppController.class.getSimpleName();\r\n    private RequestQueue mRequestQueue;\r\n    private static AppController mInstance;\r\n    @Override\r\n\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        mInstance = this;\r\n    }\r\n\r\n    public static synchronized AppController getInstance() {\r\n        return mInstance;\r\n    }\r\n    public RequestQueue getRequestQueue() {\r\n\r\n        if (mRequestQueue == null) {\r\n            mRequestQueue = Volley.newRequestQueue(getApplicationContext());\r\n        }\r\n        return mRequestQueue;\r\n    }\r\n    public <T> void addToRequestQueue(Request<T> req, String tag) {\r\n        req.setTag(TextUtils.isEmpty(tag) ? TAG : tag);\r\n        getRequestQueue().add(req);\r\n    }\r\n\r\n    public <T> void addToRequestQueue(Request<T> req) {\r\n        req.setTag(TAG);\r\n        getRequestQueue().add(req);\r\n    }\r\n    public void cancelPendingRequests(Object tag) {\r\n        if (mRequestQueue != null) {\r\n            mRequestQueue.cancelAll(tag);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nThen You have to Add this class to your manifest file.So inside the Application tag put the name of class.\r\n\r\n\r\n<application android:label=\"@string/app_name\"\r\n                 android:icon=\"@drawable/ic_launcher\"\r\n                 android:name=\"com.example.Android_Volley.AppController\">\r\n        <activity android:name=\"MyActivity\"\r\n                  android:label=\"@string/app_name\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\"/>\r\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\nAnd also make shure add internet permission in to your application.\r\n\r\n <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n\r\nThen inside main activity i have one button and when i click button it will read json object and show in to textview.I have used this public json call to show demo.(http://time.jsontest.com/) it will return date, time and other parameter inside json object.\r\n\r\ndate:- String\r\nmili seconds :- Double\r\ntime:- String\r\n\r\nwhen button clicked it called to this method.\r\n\r\n   /**\r\n     *  Send request\r\n     */\r\n\r\n    private void makeJsonObjectRequest() {\r\n        showpDialog();\r\n        JsonObjectRequest jsonObjReq = new JsonObjectRequest(Method.GET,\r\n                urlJsonObj, null, new Response.Listener<JSONObject>() {\r\n            @Override\r\n\r\n            public void onResponse(JSONObject response) {\r\n                try {\r\n                    // Parsing json object response\r\n                    // response will be a json object\r\n                    String time = response.getString(\"time\");\r\n                    Double mili = response.getDouble(\"milliseconds_since_epoch\");\r\n                    String date = response.getString(\"date\");\r\n                    jsonResponse = \"\";\r\n                    jsonResponse += \"Time: \" + time + \"\\n\\n\";\r\n                    jsonResponse += \"seconds: \" + mili + \"\\n\\n\";\r\n                    jsonResponse += \"Date: \" + date + \"\\n\\n\";\r\n                    txtResponse.setText(jsonResponse);\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                    Toast.makeText(getApplicationContext(),\r\n                            \"Error: \" + e.getMessage(),\r\n                            Toast.LENGTH_LONG).show();\r\n                }\r\n                hidepDialog();\r\n\r\n            }\r\n\r\n        }, new Response.ErrorListener() {\r\n\r\n            @Override\r\n\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(getApplicationContext(),\r\n                        error.getMessage(), Toast.LENGTH_SHORT).show();\r\n                // hide the progress dialog\r\n                hidepDialog();\r\n\r\n            }\r\n\r\n        });\r\n        // Adding request to request queue\r\n        AppController.getInstance().addToRequestQueue(jsonObjReq);\r\n\r\n    }\r\n\r\n\r\nIn this method hideDialog and showDialog methods used to add progressDialog.","google":"002","note":"Don't delete this file! It's used internally to help with page regeneration."}